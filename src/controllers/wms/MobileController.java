package controllers.wms;import java.util.Date;import models.UserLogin;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.aop.Before;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import com.jfinal.plugin.activerecord.tx.Tx;import com.jfinal.plugin.activerecord.tx.TxConfig;import controllers.profile.LoginUserController;public class MobileController extends Controller {    private Logger logger = Logger.getLogger(MobileController.class);    Subject currentUser = SecurityUtils.getSubject();        public void getUserInfo(){        UserLogin user = LoginUserController.getLoginUser(this);        renderJson(user);    }    //拣货, 查询波次单    public void searchWaveOrder() {        String barcode = getPara();        String sql = "select order_no, status from wave_order "                + "	WHERE order_no= ?";        Record rec = Db.findFirst(sql, barcode);        if (rec != null) {            renderJson(rec);        } else {            rec = new Record();            rec.set("order_no", "null");            renderJson(rec);        }    }    //拣货, 标记波次单已开始拣货    public void startPickup() {        String orderNo = getPara();        String sql = "update wave_order set status='拣货中' WHERE order_no= ?";        int count = Db.update(sql, orderNo);        Record rec = new Record();        if (count == 1) {            rec.set("status", "done");            renderJson(rec);        } else {            rec.set("status", "fail");            renderJson(rec);        }        firstPickup(orderNo);    }    //拣货, 查询波次单第一个商品    private void firstPickup(String orderNo) {        String pickupSql = "select wo.order_no, goi.id goi_id, ifnull(woi.cargo_name, goi.cargo_name) cargo_name1, woi.* from wave_order_item woi "                + " left join wave_order wo on woi.order_id = wo.id "                + " left join gate_out_order go on woi.gate_out_no = go.order_no "                + " left join gate_out_order_item goi on goi.order_id = go.id and woi.cargo_bar_code = goi.bar_code "                + " where woi.pickup_flag='N' and wo.order_no=? order by seq";        Record orderRec = Db.findFirst(pickupSql, orderNo);        if (orderRec != null) {            renderJson(orderRec);        } else {            orderRec = new Record();            orderRec.set("order_no", "done");            renderJson(orderRec);        }    }    //拣货, 查询波次单下一个商品    @Before(Tx.class)    public void nextPickup() {        String barcode = getPara("barcode");        String orderNo = getPara("orderNo");                Db.update("update wave_order_item set pickup_flag='Y' where cargo_bar_code=?"                + " and order_id=(select id from wave_order where order_no=?)", barcode, orderNo);                String pickupSql = "select wo.order_no, goi.id goi_id, ifnull(woi.cargo_name, goi.cargo_name) cargo_name1, woi.* from wave_order_item woi "                + " left join wave_order wo on woi.order_id = wo.id "                + " left join gate_out_order go on woi.gate_out_no = go.order_no "                + " left join gate_out_order_item goi on goi.order_id = go.id and woi.cargo_bar_code = goi.bar_code "                + " where woi.pickup_flag='N' and wo.order_no=? order by seq";        Record orderRec = Db.findFirst(pickupSql, orderNo);        if (orderRec != null) {            renderJson(orderRec);        } else {            orderRec = new Record();            orderRec.set("order_no", "done");            renderJson(orderRec);        }    }        //上架, 查询(验货单)商品条码推荐库位    public void putOnSearchBarcode() {        String barcode = getPara();        String sql = "select ioi.bar_code, ioi.shelves, gii.cargo_name from inspection_order_item ioi"            +" left join inspection_order io on ioi.order_id=io.id "            +" left join gate_in_order_item gii on io.gate_in_order_id = gii.order_id"            +" WHERE shelves is not null and bar_code= ?";        Record rec = Db.findFirst(sql, barcode);        if (rec != null) {            renderJson(rec);        } else {            rec = new Record();            rec.set("bar_code", "null");            renderJson(rec);        }    }        //上架确认, 记录商品条码, 数量, 库位    public void putOnConfirm() {        String barcode = getPara("barcode");        String cargoName = getPara("cargoName");        String shelves = getPara("shelves");        Integer amount = getParaToInt("shelves");        String userId = getPara("userId");        String sql = " insert into put_on_item_log(barcode, cargo_name, shelves, amount, creator_id, create_stamp) values (?, ?, ?, ?, ?, ?)";        int count= Db.update(sql, barcode, cargoName, shelves, amount, userId, new Date());                Record rec = new Record();        if (count>0) {            rec.set("status", "ok");            renderJson(rec);            renderJson(rec);        } else {            rec.set("status", "fail");            renderJson(rec);        }    }}