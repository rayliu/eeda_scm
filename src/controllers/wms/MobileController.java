package controllers.wms;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import models.UserLogin;import models.eeda.Leads;import org.apache.commons.lang.StringUtils;import org.apache.commons.mail.DefaultAuthenticator;import org.apache.commons.mail.Email;import org.apache.commons.mail.SimpleEmail;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authz.annotation.Logical;import org.apache.shiro.authz.annotation.RequiresRoles;import org.apache.shiro.subject.Subject;import com.google.gson.Gson;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.eeda.util.DataTablesUtils;import controllers.util.DbUtils;public class MobileController extends Controller {    private Logger logger = Logger.getLogger(MobileController.class);    Subject currentUser = SecurityUtils.getSubject();    public void searchWaveOrder() {        String barcode = getPara();        String sql = "select order_no, status from wave_order "                + "	WHERE order_no= ?";        Record rec = Db.findFirst(sql, barcode);        if (rec != null) {            renderJson(rec);        } else {            rec = new Record();            rec.set("order_no", "null");            renderJson(rec);        }    }    public void startPickup() {        String barcode = getPara();        String sql = "update wave_order set status='拣货中' WHERE order_no= ?";        int count = Db.update(sql, barcode);        Record rec = new Record();        if (count == 1) {            rec.set("status", "done");            renderJson(rec);        } else {            rec.set("status", "fail");            renderJson(rec);        }        String pickupSql = "select wo.order_no, goi.id goi_id, ifnull(woi.cargo_name, goi.cargo_name) cargo_name1, woi.* from wave_order_item woi "                + " left join wave_order wo on woi.order_id = wo.id "                + " left join gate_out_order go on woi.gate_out_no = go.order_no "                + " left join gate_out_order_item goi on goi.order_id = go.id and woi.cargo_bar_code = goi.bar_code "                + " where woi.pickup_flag='N' and wo.order_no=? order by seq";        Record orderRec = Db.findFirst(pickupSql, barcode);        if (orderRec != null) {            renderJson(orderRec);        } else {            orderRec = new Record();            rec.set("order_no", "null");            renderJson(rec);        }    }}