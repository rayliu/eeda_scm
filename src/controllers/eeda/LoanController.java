package controllers.eeda;import java.util.Calendar;import java.util.Date;import java.util.LinkedHashMap;import java.util.List;import java.util.Map.Entry;import java.util.Set;import models.Party;import models.PartyAttribute;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;public class LoanController extends Controller {	private Logger logger = Logger.getLogger(LoanController.class);	Subject currentUser = SecurityUtils.getSubject();	private boolean isAuthenticated() {		if (!currentUser.isAuthenticated()) {			redirect("/login");			return false;		}		setAttr("userId", currentUser.getPrincipal());		return true;	}	public void index() {		if (!isAuthenticated())			return;		List<Party> partyList = Party.dao.find("select * from party where party_type ='贷款客户' order by create_date desc");		// Db.find("select * from party where party_type ='贷款客户' order by create_date desc");		System.out.println("size:" + partyList.size());		setAttr("loanList", partyList).render("/eeda/loan/list.html");	}	public void edit() {		if (!isAuthenticated())			return;		String id = getPara();		if (id != null) {			Party p = Party.dao.findById(id);			setAttr("party", p);		}		render("/eeda/loan/edit.html");	}	public void save() {		if (!isAuthenticated())			return;		Party party = null;		String id = getPara("id");		if (id != "") {			party = Party.dao.findById(id);		} else {			party = new Party();		}		if (id != "") {			Db.update("delete from party_attribute where party_id=?", id);			party.update();		} else {			Date createDate = Calendar.getInstance().getTime();			party.set("party_type", "贷款客户").set("create_date", createDate).set("creator", currentUser.getPrincipal()).save();			id = String.valueOf(party.get("id"));		}		LinkedHashMap<String, String> map = new LinkedHashMap<String, String>();		map.put("name", getPara("name"));		map.put("priority", getPara("priority"));		map.put("loan_max", getPara("loan_max"));		map.put("mobile", getPara("mobile"));		map.put("email", getPara("email"));		Set<Entry<String, String>> paSet = map.entrySet();		for (Entry<String, String> entry : paSet) {			PartyAttribute pa = new PartyAttribute();			pa.set("party_id", id).set("attr_name", entry.getKey()).set("attr_value", entry.getValue()).save();		}		index();	}}