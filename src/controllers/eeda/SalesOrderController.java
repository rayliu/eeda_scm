package controllers.eeda;import java.io.IOException;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.LinkedHashMap;import java.util.List;import models.eeda.Order;import models.eeda.OrderItem;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.fasterxml.jackson.core.JsonParseException;import com.fasterxml.jackson.databind.JsonMappingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.jfinal.aop.Before;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import com.jfinal.plugin.activerecord.tx.Tx;public class SalesOrderController extends Controller {	private Logger logger = Logger.getLogger(SalesOrderController.class);	Subject currentUser = SecurityUtils.getSubject();	private boolean isAuthenticated() {		if (!currentUser.isAuthenticated()) {			redirect("/login");			return false;		}		setAttr("userId", currentUser.getPrincipal());		return true;	}	public void index() {		if (!isAuthenticated())			return;		List<Record> orderList = Db.find("select * from order_header where type='SALES_ORDER' order by create_date desc");		System.out.println("size:" + orderList.size());		setAttr("orderList", orderList).render("/eeda/salesOrder/list.html");	}	public void view() {		if (!isAuthenticated())			return;		String id = getPara();		if (id != null) {			Order order = Order.dao.findById(id);			setAttr("order", order);		}		render("/eeda/salesOrder/view.html");	}	public void edit() {		if (!isAuthenticated())			return;		String id = getPara();		if (id != null) {			Order order = Order.dao.findById(id);			List<OrderItem> itemList = OrderItem.dao.find("select * from order_item where order_id = ?", id);			setAttr("order", order);			setAttr("itemList", itemList);		}		render("/eeda/salesOrder/edit.html");	}	@Before(Tx.class)	public void save() {		if (!isAuthenticated())			return;		Order order = null;		String id = getPara("id");		if (id != "") {			order = Order.dao.findById(id);		} else {			order = new Order();		}		order.set("order_no", getPara("order_no"));		order.set("type", "SALES_ORDER");		order.set("status", getPara("status"));		order.set("remark", getPara("remark"));		if (id != "") {			order.update();			// delete all items			Db.update("delete from order_item where order_id =?", id);			// insert new items			insertItems(getPara("itemsJson"), id);		} else {			order.set("creator", currentUser.getPrincipal());			Date createDate = Calendar.getInstance().getTime();			order.set("create_Date", createDate);			order.save();			// insert new items		}		redirect("/salesOrder");	}	private void insertItems(String itemJson, String order_id) {		if (itemJson == null || itemJson.trim().length() == 0)			return;		try {			ObjectMapper mapper = new ObjectMapper(); // create once, reuse			ArrayList<LinkedHashMap<?, ?>> itemList = mapper.readValue(itemJson, ArrayList.class);			for (LinkedHashMap<?, ?> row : itemList) {				OrderItem orderItem = new OrderItem();				orderItem.set("order_id", order_id);				orderItem.set("item_name", row.get("item_name"));				orderItem.set("item_desc", row.get("item_desc"));				orderItem.set("quantity", row.get("quantity"));				orderItem.set("unit_price", row.get("unit_price"));				orderItem.save();			}		} catch (JsonParseException e) {			e.printStackTrace();		} catch (JsonMappingException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}	}}